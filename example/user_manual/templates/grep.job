# This is a templated Condor job descritopn file. For syntax and more 
# information, see 
#   http://research.cs.wisc.edu/condor/manual/v7.6/condor_submit.html

# Path to the executable. In our case we just put it in code_root (a Python 
# variable).
Executable              = {{ code_root }}/grep.py
# We know that the previous step splits the input page into N chunks of 10,000 
# lines each. Each chunk is called 
#   text_<i>.html
# where i goes from 0 to N-1.
# Condor provides the $(Process) variable for us which plays the same role as i
# above for parallel jobs. The text we need to find in text_$(Process).html is
# being passed to us by the tool that submitted the workflow in the variable
# {{ word }}, which is a template variable.
Arguments               = {{ word }} text_$(Process).html
# This is where we redirect STDOUT and STDERR.
Output                  = grep.out
Error                   = grep.err

# We know, but do not care at the moment, that grep.py will generate an output
# file called 
#   text_$(Process).result
# Condor will transfer it for us automatically.

# Universe = vanilla is Condor-speak for a workflow that uses simple commandline 
# executables.
Universe                = vanilla
# This is the single log file we are going to use for the whole workflow. We 
# could specify a log file per step, of course.
Log                     = {{ dataset }}.log
# OWL uses this in order to create the right entries in the backboard.
+InputDataset           = "{{ dataset }}"

# We ask Condor to always transfer files for up and to transfer output files as
# the step exits.
Should_Transfer_Files   = ALWAYS
When_to_Transfer_Output = ON_EXIT
# We want to make sure that Condor transfers the input file for us:
transfer_input_files = text_$(Process).html

# We want to capture the full user environment and make it available to the 
# Step as it executes. This is helpful for using third-party software in non
# standard locations, for instance.
GetEnv                  = True

# This is needed by OWL to invoke the correct Condor Job Hooks for populating
# the backboard. For more information on job hooks, see
#   http://research.cs.wisc.edu/condor/manual/v7.6/4_4Hooks.html
+HookKeyword            = "OWL"
# This is informational only for OWL.
# Here is where the power of templates really shines through. We do not know
# how many chunks were generated by the step above, however the tool we use to 
# start the processing is able to count the lines, divide by 10,000 and come up
# with the total number n of chunks.
+Instances              = {{ n }}

# Since we do not want to get an email each time a step exits, we simply turn 
# off email notifications.
Notification            = Never
# This is Condor-speak to mean "start n instances". OWL replaces n with the 
# appropriate value (i.e. the number of chunks).
Queue {{ n }}

